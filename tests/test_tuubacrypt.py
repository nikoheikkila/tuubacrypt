import pytest

from string import punctuation, whitespace
from tuubacrypt import TuubaCrypt

NON_ALPHABET = punctuation + whitespace

PLAIN_DATA = [
    ['', ''],
    ["HELLO", "IGOPT"],
    ["19AZ", "21DD"],
    ['"ALL YOUR BASE ARE BELONG TO US"', '"BNO CTAY JJCP MES QUCGGA OK RQ"'],
    ['Encryption works for letters A-Z and numbers 0-9 and is case insensitive.', 'Fncryption works for letters C-C and numbers 4-4 and is case insensitive.'],
    ['LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISCING ELIT. MORBI TRISTIQUE EGESTAS SAPIEN, ET LUCTUS ANTE CONVALLIS VITAE. MAURIS TEMPUS ODIO UT IPSUM INTERDUM, SIT AMET TEMPUS NUNC ELEMENTUM. INTEGER MOLLIS MAURIS NON RISUS DAPIBUS, EU GRAVIDA LOREM PORTA. PROIN EUISMOD, URNA SED PELLENTESQUE AUCTOR, NISI MASSA CONSEQUAT NULLA, NEC DICTUM MASSA NISL VEL NISI. NULLAM ELEMENTUM SEM AC QUAM DAPIBUS, NEC RUTRUM ANTE DIGNISSIM. VIVAMUS PULVINAR VULPUTATE NUNC, EGET IMPERDIET NEQUE ACCUMSAN SIT AMET. NULLA ALIQUAM IPSUM ET PORTA ULLAMCORPER. FUSCE IMPERDIET COMMODO ODIO, IN RUTRUM EROS PLACERAT EU. LOREM IPSUM DOLOR SIT AMET, CONSECTETUR ADIPISCING ELIT. CLASS APTENT TACITI SOCIOSQU AD LITORA TORQUENT PER CONUBIA NOSTRA, PER INCEPTOS HIMENAEOS. NULLA ET LIGULA VENENATIS, PORTTITOR QUAM ET, VIVERRA ENIM. DONEC SUSCIPIT, NUNC NEC CONSECTETUR VIVERRA, EST ELIT SODALES RISUS, VITAE SCELERISQUE MASSA DUI AC NIBH. CURABITUR POSUERE ALIQUAM MAXIMUS. IN PLACERAT PULVINAR FELIS IN MOLESTIE. FUSCE TELLUS LACUS, BLANDIT UT QUAM A, PHARETRA IACULIS VELIT. NULLA NEC COMMODO ELIT, VEL ELEMENTUM ANTE.', 'MQUIR OWADW OAYCG IZL TGZP, ZMMSFEWIYAY IMSAUFQXDX WECO. ILPAI UTLWYOXCN ORQFHPI JSICZJ, BR KUDVXW FTAM LYYHNZAYJ NBNVA. JYTRJU WIRVBA XNTA HH XFJMF CIPBPCUN, ULX FSLB COXBHG CKEU XFZIBLSUN. KQXJMLZ VYWXVG BQLJBM IKK PHSVU GEUOICB, OF SEOKYUS EIMAJ NNRUC. SVTOU MDSDYBR, JHES LYY LBJKEOVHWVAL IDMEAE, BXIZ ETMNW ZMMSFSXEY TBTUK, YQP RXSKMF GVOPY MITN YIQ TPAR. XFXYOB UCWFYIPRK REN CF UZGT LJZTNHG, CUT JNNMQJ YMTF FLKSOZARW. GUIOBKJ HNFQEKYQ VVNSYYGAM WEYO, RUTJ ZEIYMZFCS NFSXI FIJCVCLZ FWI QDWM. HPHIY ZLJSXER OWADW PF CCGJR MEFVIZMQPFT. IYXIL QVZPDQWTJ TGFGJZL MCIP, KQ VZZYCV OCAF DAQTWKUO AR. JNRFO LTXAT LXVZD FWI QDWM, WJJPCBTFVXV FJPXRCNUAU TBZL. VFVOP YOTFPW XFIPBR CZOVCHGL SW FDPLPZ TPTTYJTA XNB NAAIQYR FHMONX, NDR JPFIUZVA QSXQAOTEJ. FNFGW BR KIHWOE AKUMWKEUF, DDHKLBNJN NSZM FV, YMAKYZJ OYUZ. RDDVU LONYFNHT, OWQG SKJ KXXDQPHTJLJ OCQAOPZ, ETV HPNZ ZWMKWQF FXILK, OCOWB QBEMGUMXWBM VKDEN RJY RU GCWD. ZSQACKWYW VVADOCQ NZXGLSF GVTFKTS. JP SPFILZJD AGYJXDRJ YYGEP GM MPNHWYOL. NDCNQ GSABLK EUXQP, ZKAOFLX ZZ XCJW L, BUOGUKJT CVYRJHS WGOMY. TBTUK YQP QDCDGWI ZHFR, UEM GOIRKUBDW LZGS.']
]

ENCRYPTED_DATA = [
    ['', ''],
    ['0', '9'],
    ['BDFHJ', 'ABCDE'],
    ['23F89DS SFH :) JÄGERMEISTER 2aabMOMENTAS Tuuba HIEFU2', '11C44XL KWX :) YÄURDXORAAKW 0aabPQNEMRXO Ouuba BBWWK5'],
    ['5439875348976 345 876345876 876389456987364587 63485769374659876345 9837465987 634958763948569876     387458768374 35876 !! 342876239846', '4205318558853 999 197333531 208488222420574464 28817868140192086222 5370675864 288279751603991975     153991978251 90208 !! 441642772056']
]

@pytest.fixture
def tuuba():
    return TuubaCrypt()

def test_encrypt_for_non_alphabet_string_returns_itself(tuuba):
    assert tuuba.encrypt(NON_ALPHABET) == NON_ALPHABET

def test_encryption_is_idempotent(tuuba):
    plain = "A Quick Brown Fox Jumped the Lazy Dog 100 Times!"
    assert tuuba.decrypt(tuuba.encrypt(plain)) == plain

@pytest.mark.parametrize("plain, expected_encrypted", PLAIN_DATA)
def test_encrypt(tuuba, plain, expected_encrypted):
    assert expected_encrypted == tuuba.encrypt(plain)

@pytest.mark.parametrize("encrypted, expected_decrypted", ENCRYPTED_DATA)
def test_decrypt(tuuba, encrypted: str, expected_decrypted: str):
    assert expected_decrypted == tuuba.decrypt(encrypted)
